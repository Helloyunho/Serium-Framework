module.exports.parse = (namumark) => {
// 리스트 제외, 메크로 치환 안하고 삭제, 테이블 완벽하지 않음 (칸 조정 무시)
//수학기호 bar 이하 생략, 반직선, 선분, 루트 이하 생략, 분수 생략, 첨자 생략, 장식, 정자체 생략
// 폴딩 무시, 틀 무시
  const conclusion = namumark.replace(/=\s*(.*)\s*=/g, '__***$1***__\n\n')
    .replace(/==\s*(.*)\s*==/g, '__**$1**__\n\n')
    .replace(/===\s*(.*)\s*===/g, '__*$1*__\n\n')
    .replace(/====\s*(.*)\s*====/g, '__$1__\n\n')
    .replace(/=====\s*(.*)\s*=====/g, '**$1**\n\n')
    .replace(/======\s*(.*)\s*======/g, '*$1*\n\n')
    .replace(/\'\'\'\s*(.*)\s*\'\'\'/g, '**$1**')
    .replace(/\'\'\s*(.*)\s*\'\'/g, '*$1*')
    .replace(/~~\s*(.*)\s*~~/g, '~~$1~~')
    .replace(/--\s*(.*)\s*--/g, '~~$1~~')
    .replace(/__\s*(.*)\s*__/g, '__$1__')
    .replace(/\^\^\s*(.*)\s*\^\^/g, '($1)')
    .replace(/,,\s*(.*)\s*,,/g, '($1)')
    .replace(/\[include\s*(.*)\s*\]/g, '')
    .replace(/{{{+1\s*(.*)\s*}}}/g, '*$1*')
    .replace(/{{{+2\s*(.*)\s*}}}/g, '**$1**')
    .replace(/{{{+3\s*(.*)\s*}}}/g, '***$1***')
    .replace(/{{{+4\s*(.*)\s*}}}/g, '__*$1*__')
    .replace(/{{{+5\s*(.*)\s*}}}/g, '__**$1**__')
    .replace(/{{{-1\s*(.*)\s*}}}/g, '($1)')
    .replace(/{{{-2\s*(.*)\s*}}}/g, '(*$1*)')
    .replace(/{{{-3\s*(.*)\s*}}}/g, '(**$1**)')
    .replace(/{{{-4\s*(.*)\s*}}}/g, '(***$1***)')
    .replace(/{{{-5\s*(.*)\s*}}}/g, '(__$1__)')
    .replace(/{{{#\s*(.*)\s*}}}/g, '__$1__')
    .replace(/{{{#!html\s*(.*)\s*}}}/g, '')
    .replace(/{{{#!wiki\s*(.*)\s*}}}/g, '')
    .replace(/{{{\s*(.*)\s*}}}/g, '$1')
    .replace(/\[\[\s*(.*)\s*\]\]/g, '[$1]($1)')
    .replace(/\[\[\s*(.*)\s*\]\]/g, '[$1]($1)')
    .replace(/\[\[#\s*(.*)\s*\]\]/g, '__[$1]($1)__')
    .replace(/\[\[파일:\s*(.*)\s*\]\]/g, '[' + '$1'.split('|')[0] + '](https://namu.wiki/w/파일:' + '$1'.split('|')[0] + ')')
    .replace(/\[anchor\(\s*(.*)\s*\)\]/g, '')
    .replace(/\[youtube\(\s*(.*)\s*\)\]/g, '[YouTube](https://youtu.be/' + '$1'.split(',')[0])
    .replace(/\[* \s*(.*)\s*\]/g, '__[#$1]__')
    .replace(/\>\s*(.*)\s*/g, '\n__[$1]__\n')
    .replace(/\-\-\-\-\s*(.*)\s*/g, '\n____\n')
    .replace(/\-\-\-\-\-\s*(.*)\s*/g, '\n_____\n')
    .replace(/\-\-\-\-\-\-\s*(.*)\s*/g, '\n______\n')
    .replace(/\-\-\-\-\-\-\-\s*(.*)\s*/g, '\n_______\n')
    .replace(/\-\-\-\-\-\-\-\-\s*(.*)\s*/g, '\n________\n')
    .replace(/\-\-\-\-\-\-\-\-\-\s*(.*)\s*/g, '\n_________\n')
    .replace(/##\s*(.*)\s*/g, '')
    .replace(/\[\s*(.*)\s*\]/g, '')
    .replace(/\|\|\s*(.*)\s*\|\|/g, '\n____\n$1\n____\n')
    .replace(/\<math\>\s*(.*)\s*\<\/math\>/g, '***$1***'.replace(/\\ \s*(.*)\s*/g, ' ')
      .replace(/\\quad\s*(.*)\s*/g, ' ')
      .replace(/\\qquad\s*(.*)\s*/g, ' ')
      .replace(/\\,\s*(.*)\s*/g, ' ')
      .replace(/\\:\s*(.*)\s*/g, ' ')
      .replace(/\\\;\s*(.*)\s*/g, ' ')
      .replace(/\\triangle\s*(.*)\s*/g, '△')
      .replace(/\\rightarrow\s*(.*)\s*/g, '→')
      .replace(/\\times\s*(.*)\s*/g, '×')
      .replace(/\\div\s*(.*)\s*/g, '÷')
      .replace(/\\leq\s*(.*)\s*/g, '≤')
      .replace(/\\geq\s*(.*)\s*/g, '≥')
      .replace(/\\neq\s*(.*)\s*/g, '≠')
      .replace(/\\equiv\s*(.*)\s*/g, '≡')
      .replace(/\\angle\s*(.*)\s*/g, '∠')
      .replace(/\\therefore\s*(.*)\s*/g, '∴')
      .replace(/\\because\s*(.*)\s*/g, '∵')
      .replace(/\\infty\s*(.*)\s*/g, '∞')
      .replace(/\\left \| x \\right \|\s*(.*)\s*/g, '∣x∣')
      .replace(/\\pi\s*(.*)\s*/g, 'π')
      .replace(/\\mathbb{\s*(.*)\s*}/g, '$1')
      .replace(/\\cric\s*(.*)\s*/g, '∘')
      .replace(/\\leftarrow\s*(.*)\s*/g, '←')
      .replace(/\\leftrightarrow\s*(.*)\s*/g, '↔')
      .replace(/\\Rightarrow\s*(.*)\s*/g, '⇒')
      .replace(/\\Leftarrow\s*(.*)\s*/g, '⇐')
      .replace(/\\Leftrightarrow\s*(.*)\s*/g, '⇔')
    )
    .replace(/{{{#!folding\s*(.*)\s*}}}/g, '')
    .replace(/{{{#!syntax\s*(.*)\s*}}}/g, '``$1``')
  return conclusion
}
